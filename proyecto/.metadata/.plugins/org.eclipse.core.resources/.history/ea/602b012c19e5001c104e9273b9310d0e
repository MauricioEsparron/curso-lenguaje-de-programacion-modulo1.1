package vista;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import utils.Validaciones;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.SwingConstants;
import javax.swing.JScrollPane;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

public class FrmTransaccion extends JFrame implements ActionListener, KeyListener {

	private JPanel contentPane;
	private JLabel lblNumeroTarjeta;
	private JLabel lblCodigoCliente;
	private JLabel lblNumeroDeCuenta;
	private JLabel lblCodigoOperacion;
	private JLabel lblFechaTransaccion;
	private JLabel lblNewLabel;
	private JLabel lblMonto;
	private JTextField txtNumeroTarjeta;
	private JTextField txtCodigoCliente;
	private JTextField txtNumeroDeCuenta;
	private JComboBox cboOperacion;
	private JTextField txtFechaTransaccion;
	private JTextField txtCuentaDestino;
	private JTextField txtMonto;
	private JButton btnGuardar;
	private JButton btnEliminar;
	private JTable tblTarjeta;
	private JButton btnCerrar;
	private JButton btnNuevo;
	private JLabel lblNewLabel_1;
	private JScrollPane scrollPane;

	DefaultTableModel model = new DefaultTableModel();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmTransaccion frame = new FrmTransaccion();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmTransaccion() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 717, 494);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		lblNumeroTarjeta = new JLabel("Nro. Tarjeta :");
		lblNumeroTarjeta.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNumeroTarjeta.setBounds(10, 74, 109, 14);
		contentPane.add(lblNumeroTarjeta);

		lblCodigoCliente = new JLabel("Cod. Cliente :");
		lblCodigoCliente.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblCodigoCliente.setBounds(10, 99, 109, 14);
		contentPane.add(lblCodigoCliente);

		lblNumeroDeCuenta = new JLabel("Num. cuenta :");
		lblNumeroDeCuenta.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNumeroDeCuenta.setBounds(10, 124, 109, 14);
		contentPane.add(lblNumeroDeCuenta);

		lblCodigoOperacion = new JLabel("Operación :");
		lblCodigoOperacion.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblCodigoOperacion.setBounds(10, 152, 109, 14);
		contentPane.add(lblCodigoOperacion);

		lblFechaTransaccion = new JLabel("Fecha Transacción :");
		lblFechaTransaccion.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblFechaTransaccion.setBounds(10, 177, 122, 14);
		contentPane.add(lblFechaTransaccion);

		lblNewLabel = new JLabel("Cuenta destino :");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNewLabel.setBounds(10, 202, 109, 14);
		contentPane.add(lblNewLabel);

		lblMonto = new JLabel("Monto :");
		lblMonto.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblMonto.setBounds(10, 227, 109, 14);
		contentPane.add(lblMonto);

		txtNumeroTarjeta = new JTextField();
		txtNumeroTarjeta.addKeyListener(this);
		txtNumeroTarjeta.setBounds(142, 71, 86, 20);
		contentPane.add(txtNumeroTarjeta);
		txtNumeroTarjeta.setColumns(10);

		txtCodigoCliente = new JTextField();
		txtCodigoCliente.addKeyListener(this);
		txtCodigoCliente.setBounds(142, 96, 86, 20);
		contentPane.add(txtCodigoCliente);
		txtCodigoCliente.setColumns(10);

		txtNumeroDeCuenta = new JTextField();
		txtNumeroDeCuenta.addKeyListener(this);
		txtNumeroDeCuenta.setBounds(142, 121, 86, 20);
		contentPane.add(txtNumeroDeCuenta);
		txtNumeroDeCuenta.setColumns(10);

		cboOperacion = new JComboBox();
		cboOperacion.addKeyListener(this);
		cboOperacion.setBounds(142, 148, 114, 22);
		contentPane.add(cboOperacion);

		txtFechaTransaccion = new JTextField();
		txtFechaTransaccion.setEditable(false);
		txtFechaTransaccion.setBounds(142, 174, 86, 20);
		contentPane.add(txtFechaTransaccion);
		txtFechaTransaccion.setColumns(10);

		txtCuentaDestino = new JTextField();
		txtCuentaDestino.addKeyListener(this);
		txtCuentaDestino.setBounds(142, 199, 86, 20);
		contentPane.add(txtCuentaDestino);
		txtCuentaDestino.setColumns(10);

		txtMonto = new JTextField();
		txtMonto.addKeyListener(this);
		txtMonto.setBounds(142, 224, 86, 20);
		contentPane.add(txtMonto);
		txtMonto.setColumns(10);

		btnGuardar = new JButton("Guardar");
		btnGuardar.addActionListener(this);
		btnGuardar.setIcon(
				new ImageIcon(FrmTransaccion.class.getResource("/img/7351060_bookmark_favorite_star_save_icon.png")));
		btnGuardar.setBounds(538, 121, 114, 39);
		contentPane.add(btnGuardar);

		btnEliminar = new JButton("Eliminar");
		btnEliminar.setIcon(new ImageIcon(
				FrmTransaccion.class.getResource("/img/370086_bin_delete_empty_out_recycle_icon (1).png")));
		btnEliminar.setBounds(414, 71, 114, 39);
		contentPane.add(btnEliminar);

		scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 261, 681, 183);
		contentPane.add(scrollPane);

		tblTarjeta = new JTable();
		tblTarjeta.setFillsViewportHeight(true);
		scrollPane.setViewportView(tblTarjeta);

		btnCerrar = new JButton("Cerrar");
		btnCerrar.setIcon(new ImageIcon(
				FrmTransaccion.class.getResource("/img/646197_cancel_close_cross_delete_remove_icon.png")));
		btnCerrar.setBounds(538, 174, 114, 39);
		contentPane.add(btnCerrar);

		btnNuevo = new JButton("Nuevo");
		btnNuevo.setIcon(new ImageIcon(FrmTransaccion.class.getResource("/img/370092_add_plus_create_new_icon.png")));
		btnNuevo.setFont(new Font("Tahoma", Font.BOLD, 11));
		btnNuevo.setBounds(538, 71, 114, 39);
		contentPane.add(btnNuevo);

		lblNewLabel_1 = new JLabel("MantenimientoTransacción");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 17));
		lblNewLabel_1.setBounds(10, 20, 271, 20);
		contentPane.add(lblNewLabel_1);

		txtFechaTransaccion.setText(new SimpleDateFormat("yyyy/MM/dd").format(new Date()));

		model.addColumn("Nro Tarjeta");
		model.addColumn("Cod Cliente");
		model.addColumn("Num Cuenta");
		model.addColumn("Operación");
		model.addColumn("Fec Transacción");
		model.addColumn("Cuenta destino");
		model.addColumn("Monto");

		tblTarjeta.setModel(model);

	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnGuardar) {
			actionPerformedBtnGuardar(e);
		}
	}

	protected void actionPerformedBtnGuardar(ActionEvent e) {
		ingresar();
	}

	private void ingresar() {

		int num_Tarjeta, operacion, cod_cliente, cod_cuenta, cuenta_destino;
		String fecTransaccion;
		double monto;

		num_Tarjeta = leerNumeroTarjeta();
		cod_cliente = leerCodigoCliente();
		cod_cuenta = leerCuenta();
		operacion = leerOperacion();
		fecTransaccion = leerfecTransaccion();
		cuenta_destino = leerCuentaDestino();
		monto = leerMonto();

		if (num_Tarjeta == -1 || cod_cliente == -1 || cod_cuenta == -1 || operacion == 0 || fecTransaccion == null
				|| cuenta_destino == -1 || monto == -1) {
			return;
		} else {

			Object fila[] = { num_Tarjeta, cod_cliente, cod_cuenta, operacion, fecTransaccion, cuenta_destino, monto };
			model.addRow(fila);
		}
	}

	private double leerMonto() {
		double monto = -1;
		if (txtMonto.getText().trim().length() == 0) {
			mensajeError("");
		} else if (txtMonto.getText().trim().matches(Validaciones.MONTO)) {
			monto = Double.parseDouble(txtMonto.getText());
		} else {
			mensajeError("Solo se puede realizar transacciones hasta de S/.5000");
			txtMonto.setText("");
			txtMonto.requestFocus();
			txtMonto.setBackground(Color.RED);
			monto = -1;
		}
		return monto;

	}

	private int leerCuentaDestino() {
		int cuentaDestino = -1;
		if (txtCuentaDestino.getText().trim().length() == 0) {
			mensajeError("Debe s ingresar este campo para poder continuar con la operación ");
		} else if (txtCuentaDestino.getText().trim().matches(Validaciones.NUM_CUENTA)) {
			cuentaDestino = Integer.parseInt(txtCuentaDestino.getText());
		} else {
			mensajeError("El número de cuenta no existe");
			txtCuentaDestino.setText("");
			txtCuentaDestino.requestFocus();
			txtCuentaDestino.setBackground(Color.RED);
			cuentaDestino = -1;
		}
		return cuentaDestino;
	}

	private String leerfecTransaccion() {
		String fecTrans = null;
		if (txtFechaTransaccion.getText().trim().length() == 0) {
			mensajeError("");
		}
		return fecTrans;
	}

	private int leerOperacion() {
		int operacion = 0;
		if (cboOperacion.getSelectedIndex() == 0) {
			mensajeError("Debe seleccionar el tipo de operacion a realizar, para poder continuar");
			cboOperacion.setSelectedIndex(0);
			operacion = 0;
		} else if (txtCuentaDestino.getText().trim().matches(Validaciones.CODIGO_CLIENTE)) {
			operacion = Integer.parseInt(txtCuentaDestino.getText());
		} else {
			mensajeError("Formato del código no válido. Ejem 0001");
			cboOperacion.setSelectedIndex(0);
			cboOperacion.setBackground(Color.RED);
			operacion = 0;
		}
		return operacion;
	}

	private int leerCuenta() {
		int cuenta = -1;
		if (txtCuentaDestino.getText().trim().length() == 0) {
			mensajeError("El campo es obligatorio, porfavor ingresa tu cuenta");
			txtCuentaDestino.requestFocus();
			cuenta = -1;
		} else if (txtCuentaDestino.getText().trim().matches(Validaciones.CODIGO_CLIENTE)) {
			cuenta = Integer.parseInt(txtCuentaDestino.getText());
		} else {
			mensajeError("Formato del código no válido. Ejem 0001");
			txtCuentaDestino.setText("");
			txtCuentaDestino.requestFocus();
			txtCuentaDestino.setBackground(Color.RED);
			cuenta = -1;
		}
		return cuenta;
	}

	private int leerCodigoCliente() {
		int codCliente = -1;
		if (txtCodigoCliente.getText().trim().length() == 0) {
			mensajeError("");
			txtCodigoCliente.requestFocus();
			codCliente = -1;
		} else if (txtCodigoCliente.getText().trim().matches(Validaciones.CODIGO_CLIENTE)) {
			codCliente = Integer.parseInt(txtCodigoCliente.getText());
		} else {
			mensajeError("Formato del código no válido. Ejem 0001");
			txtCodigoCliente.setText("");
			txtCodigoCliente.requestFocus();
			txtCodigoCliente.setBackground(Color.RED);
			codCliente = -1;
		}
		return codCliente;
	}

	private int leerNumeroTarjeta() {
		int numTarjeta = -1;
		if (txtNumeroTarjeta.getText().trim().length() == 0) {
			mensajeError("");
			txtNumeroTarjeta.requestFocus();
			numTarjeta = -1;
		} else if (txtNumeroTarjeta.getText().trim().matches(Validaciones.NUM_TARJETA)) {
			numTarjeta = Integer.parseInt(txtNumeroTarjeta.getText());
		} else {
			mensajeError("Formato del código no válido. Debe contener 16 caracteres");
			txtNumeroTarjeta.setText("");
			txtNumeroTarjeta.requestFocus();
			txtNumeroTarjeta.setBackground(Color.RED);
			numTarjeta = -1;
		}
		return numTarjeta;
	}

	private void mensajeError(String msj) {
		JOptionPane.showMessageDialog(this, msj, "Error !!!", 0);

	}

	public void keyPressed(KeyEvent e) {
		if (e.getSource() == cboOperacion) {
			keyPressedCboOperacion(e);
		}
		if (e.getSource() == txtMonto) {
			keyPressedTxtMonto(e);
		}
		if (e.getSource() == txtCuentaDestino) {
			keyPressedTxtCuentaDestino(e);
		}
		if (e.getSource() == txtNumeroDeCuenta) {
			keyPressedTxtNumeroDeCuenta(e);
		}
		if (e.getSource() == txtCodigoCliente) {
			keyPressedTxtCodigoCliente(e);
		}
		if (e.getSource() == txtNumeroTarjeta) {
			keyPressedTxtNumeroTarjeta(e);
		}
	}

	public void keyReleased(KeyEvent e) {
	}

	public void keyTyped(KeyEvent e) {
	}

	protected void keyPressedTxtNumeroTarjeta(KeyEvent e) {
		txtNumeroTarjeta.setBackground(Color.WHITE);
	}

	protected void keyPressedTxtCodigoCliente(KeyEvent e) {
		txtCodigoCliente.setBackground(Color.WHITE);

	}

	protected void keyPressedTxtNumeroDeCuenta(KeyEvent e) {
		txtNumeroDeCuenta.setBackground(Color.WHITE);

	}

	protected void keyPressedTxtCuentaDestino(KeyEvent e) {
		txtCuentaDestino.setBackground(Color.WHITE);

	}

	protected void keyPressedTxtMonto(KeyEvent e) {
		txtMonto.setBackground(Color.WHITE);

	}

	protected void keyPressedCboOperacion(KeyEvent e) {
		cboOperacion.setBackground(Color.WHITE);

	}
}
